using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libSDL2", "SDL2"], :libsdl2),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/SDL2_jll.jl/releases/download/SDL2-v2.0.10+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/SDL2.v2.0.10.aarch64-linux-gnu.tar.gz", "e4af64aaf96161ea41b5a18a1bf417465912bc1db3e552740e39c3a7f89e2420"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/SDL2.v2.0.10.aarch64-linux-musl.tar.gz", "5d5d437a24edc4e346a79395d1574b746c7a81d413f11e2138d63c282c3b8647"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/SDL2.v2.0.10.arm-linux-gnueabihf.tar.gz", "b82418c48bed91a10c7bb89f4269ee072eac9f4a92eb464b63f04af1d46cff7d"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/SDL2.v2.0.10.arm-linux-musleabihf.tar.gz", "c2b4a2b8ee78472136feac439d21995be0f08e3e6dbf8ffa89b0903bec485a8e"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/SDL2.v2.0.10.i686-linux-gnu.tar.gz", "695e354966e91991633ed3ed6b26f18ff63b96ea92f49b737072fb7895bcfd54"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/SDL2.v2.0.10.i686-linux-musl.tar.gz", "878a391120d8aa6f817dbff8c9063f55e776f543d3bb7cb859fc1dee5c8baa54"),
    Windows(:i686) => ("$bin_prefix/SDL2.v2.0.10.i686-w64-mingw32.tar.gz", "6c5bf153b3473e2dbdadac48aaba4ecb7445f0694ef379f3d387aa0b2085a154"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/SDL2.v2.0.10.powerpc64le-linux-gnu.tar.gz", "819d5033dd225f11e06f93ba740c50819d5f4fca2d718407f47f26b37cdcbfac"),
    MacOS(:x86_64) => ("$bin_prefix/SDL2.v2.0.10.x86_64-apple-darwin14.tar.gz", "d2c300727366ca3f196363bb864571d04a8332c4e2d0dd5920bf8e37838d8ec5"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/SDL2.v2.0.10.x86_64-linux-gnu.tar.gz", "4f39673b33d84df5116540b61cf3423819dda01c5637682c29823f71c7d56158"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/SDL2.v2.0.10.x86_64-linux-musl.tar.gz", "e62ec9b141a017472aecf07a979b64999261524ebcd9e3af8c31206c6395193b"),
    FreeBSD(:x86_64) => ("$bin_prefix/SDL2.v2.0.10.x86_64-unknown-freebsd11.1.tar.gz", "449edeaab58373e01eff79ed8bd99b329bce0532cc11939f1c30931f08c04cef"),
    Windows(:x86_64) => ("$bin_prefix/SDL2.v2.0.10.x86_64-w64-mingw32.tar.gz", "a9a6694fe885a41c5c2aa1ca23d4444ff8d29bbd1bc2b5c6ea30b92b50553ae8"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
